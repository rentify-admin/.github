name: Deploy to Lambda

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      sha:
        required: true
        type: string
      aws-region:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      FUNCTION_NAME:
        required: true
      S3_BUCKET:
        required: false

jobs:

  get_regions:
    name: Get Regions
    runs-on: ubuntu-latest
    outputs:
      regions: ${{ steps.set-regions.outputs.regions }}
    steps:
      - name: Get Regions
        id: set-regions
        run: |
          regions=$(echo "${{ inputs.aws-region }}" | jq -R 'split(",")' | jq -c)
          echo "regions=$regions" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Lambda / ${{ matrix.region }}
    runs-on: ubuntu-latest
    needs: get_regions
    environment: ${{ inputs.environment }}
    strategy:
      fail-fast: true
      matrix:
        region: ${{ fromJson(needs.get_regions.outputs.regions) }}
    steps:

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-zip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Check if S3 bucket exists
        id: bucket-exists-check
        run: |
          bucket_region=$(aws s3api get-bucket-location --bucket "${{ secrets.LAMBDA_BUCKET || secrets.S3_BUCKET }}" --output text)
          
          if [[ "$bucket_region" == "None" ]]; then
            bucket_region="us-east-1"
          fi
          
          if [[ "$bucket_region" == "${{ matrix.region }}" ]]; then
            echo "BUCKET_EXISTS=true" >> $GITHUB_ENV
          else
            echo "BUCKET_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Upload to S3
        if: env.BUCKET_EXISTS == 'true'
        run: aws s3 cp lambda.zip s3://${{ secrets.LAMBDA_BUCKET || secrets.S3_BUCKET }}/${{ secrets.FUNCTION_NAME }}/${{ inputs.sha }}.zip

      - name: Deploy to Lambda from S3
        if: env.BUCKET_EXISTS == 'true'
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.FUNCTION_NAME }} \
            --s3-bucket ${{ secrets.LAMBDA_BUCKET || secrets.S3_BUCKET }} \
            --s3-key ${{ secrets.FUNCTION_NAME }}/${{ inputs.sha }}.zip \

      - name: Deploy to Lambda from Zip File
        if: env.BUCKET_EXISTS == 'false'
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.FUNCTION_NAME }} \
            --zip-file fileb://lambda.zip \

      - name: Wait for Lambda update to complete
        run: |
          aws lambda wait function-updated \
            --function-name ${{ secrets.FUNCTION_NAME }}

      - name: Update or Create Lambda Alias
        if: ${{ vars.VERSION_ALIAS }}
        run: |
          version=$(aws lambda publish-version --function-name ${{ secrets.FUNCTION_NAME }} --query 'Version' --output text)
          alias_exists=$(aws lambda get-alias --function-name ${{ secrets.FUNCTION_NAME }} --name ${{ vars.VERSION_ALIAS }} 2>&1 || true)
          if echo "$alias_exists" | grep -q 'ResourceNotFoundException'; then
            aws lambda create-alias \
              --function-name ${{ secrets.FUNCTION_NAME }} \
              --name ${{ vars.VERSION_ALIAS }} \
              --function-version $version
          else
            aws lambda update-alias \
              --function-name ${{ secrets.FUNCTION_NAME }} \
              --name ${{ vars.VERSION_ALIAS }} \
              --function-version $version
          fi
